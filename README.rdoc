= Xapit

Xapit (pronounced "zap it") is a high level interface for working with a Xapian database.

Note: This project is early in development and the API is subject to change.


== Install

If you haven't already, first install Xapian and the Xapian Bindings for Ruby.
http://wiki.github.com/Overbryd/acts_as_xapian/installation

To install as a Rails plugin, run this command.

  script/plugin install git://github.com/ryanb/xapit.git

Note: this will soon also be available as a Ruby gem, but not yet.


== Setup

Simply call "xapit" in the model and pass a block to define the indexed attributes.

  class Article < ActiveRecord::Base
    xapit do |index|
      index.text :name, :content
      index.field :category_id
      index.facet :author_name, "Author"
      index.sortable :id, :category_id
    end
  end

First we index "name" and "content" attributes for full text searching. The "category_id" field is indexed for :conditions searching. The "author_name" is indexed as a facet with "Author" being the display name of the facet. See the facets section below for details. Finally the "id" and "category_id" attributes are indexed as sortable attributes so they can be included in the :order option in a search.

Because the indexing happens in Ruby these attributes do no have to be database columns. They can be simple Ruby methods. For example, the "author_name" attribute mentioned above can be defined like this.

  def author_name
    author.name
  end

This way you can create a completely custom facet by simply defining your own method. Multiple facet options per record are supported if you return an array.

  def author_names
    authors.map(&:name) # => ["John", "Bob"]
  end

Finally, you can pass any find options to the xapit method to determine what gets indexed or improve performance with eager loading or a different batch size.

  xapit(:batch_size => 100, :include => :author, :conditions => { :visible => true })


== Index

To perform the indexing, run the xapit:index rake task.

  rake xapit:index

It can also be triggered through Ruby code using this command.

  Xapit.index_all


== Search

You can then perform a search on the model.
  
  # perform a simple full text search
  @articles = Article.search("phone")
  
  # add pagination if you're using will_paginate
  @articles = Article.search("phone", :per_page => 10, :page => params[:page])
  
  # search based on indexed fields
  @articles = Article.search("phone", :conditions => { :category_id => params[:category_id] })
  
  # manually sort based on any number of indexed fields, sort defaults to most relevant
  @articles = Article.search("phone", :order => [:category_id, :id], :descending => true)
  
  # basic boolean matching is supported
  @articles = Article.search("phone or fax not email")


You can also search all indexed models through Xapit.search.

  # search all indexed models
  @records = Xapit.search("phone")


== Results

Simply iterate through the returned set to display the results.

  <% for article in @articles %>
    <%= article.name %>
    <%= article.xapit_relevance %>
  <% end %>

The "xapit_relevance" holds a percentage (between 0 and 100) determining how relevant the given document is to the user's search query.


== Facets

Facets allow you to further filter the result set based on certain attributes.

  <% for facet in @articles.facets %>
    <%= facet.name %>
    <% for option in facet.options %>
      <%= link_to option.name, :overwrite_params => { :facets => option }) %>
      (<%= option.count %>)
    <% end %>
  <% end %>

The to_param method is defined on option to return an identifier which will be passed through the URL. Use this in the search.

  Article.search("phone", :facets => params[:facets])

You can also list the applied facets along with a remove link.

  <% for option in @articles.applied_facet_options %>
    <%=h option.name %>
    <%= link_to "remove", :overwrite_params => { :facets => option }) %>
  <% end %>


== Outside of Rails

Xapit can be used outside of Rails too. You'll just need to include the membership module:

  class Product # not Active Record
    include Xapit::Membership
  
    xapit # ...
  end

This class is expected to respond to "find_each" (Product.find_each) which is used to iterate through the records when indexing and "find" for fetching a record by "id".


== Development

This project can be found on github at the following URL.

http://github.com/ryanb/xapit

If you would like to contribute to this project, please fork the 
repository and send me a pull request.
